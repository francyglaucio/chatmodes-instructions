#!/bin/bash

# ChatModes System - Script de Valida√ß√£o
# ======================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para output colorido
print_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

print_error() {
    echo -e "${RED}‚ùå${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è${NC} $1"
}

print_header() {
    echo -e "${BLUE}"
    echo "üîç Valida√ß√£o do Sistema ChatModes"
    echo "================================"
    echo -e "${NC}"
}

# Contadores globais
total_errors=0
total_warnings=0
broken_links=0

# Fun√ß√£o para verificar diret√≥rios
check_directories() {
    print_info "Verificando estrutura de diret√≥rios..."
    
    if [ -d ~/.vscode/chatmodes ]; then
        print_success "Diret√≥rio chatmodes encontrado"
        chatmode_count=$(ls ~/.vscode/chatmodes/*.md 2>/dev/null | wc -l)
        print_info "üìÅ $chatmode_count arquivos de chatmode encontrados"
        
        if [ $chatmode_count -lt 9 ]; then
            print_warning "Esperado pelo menos 9 perfis de chatmode"
            ((total_warnings++))
        fi
    else
        print_error "Diret√≥rio chatmodes n√£o encontrado"
        ((total_errors++))
        return 1
    fi

    if [ -d ~/.vscode/instructions ]; then
        print_success "Diret√≥rio instructions encontrado"
        instruction_count=$(ls ~/.vscode/instructions/*.md 2>/dev/null | wc -l)
        print_info "üìÅ $instruction_count arquivos de instru√ß√µes encontrados"
        
        if [ $instruction_count -lt 10 ]; then
            print_warning "Esperado pelo menos 10 arquivos de instru√ß√µes"
            ((total_warnings++))
        fi
    else
        print_error "Diret√≥rio instructions n√£o encontrado"
        ((total_errors++))
        return 1
    fi
    
    # Verificar diret√≥rio scripts (opcional)
    if [ -d ~/.vscode/scripts ]; then
        print_success "Diret√≥rio scripts encontrado"
        script_count=$(ls ~/.vscode/scripts/*.sh 2>/dev/null | wc -l)
        print_info "üìÅ $script_count scripts utilit√°rios encontrados"
    else
        print_warning "Diret√≥rio scripts n√£o encontrado (opcional)"
    fi
}

# Fun√ß√£o para verificar perfis obrigat√≥rios
check_required_profiles() {
    print_info "Verificando perfis obrigat√≥rios..."
    
    local required_profiles=(
        "architect.chatmode.md"
        "dev-angular.chatmode.md"
        "dev-react.chatmode.md"
        "dev-java.chatmode.md"
        "dev-node.chatmode.md"
        "dev-csharp.chatmode.md"
        "infra.chatmode.md"
        "qa-specialist.chatmode.md"
    )
    
    for profile in "${required_profiles[@]}"; do
        if [ -f ~/.vscode/chatmodes/"$profile" ]; then
            print_success "‚úì $profile"
        else
            print_error "‚úó $profile n√£o encontrado"
            ((total_errors++))
        fi
    done
}

# Fun√ß√£o para verificar links
check_links() {
    print_info "Verificando links entre chatmodes e instru√ß√µes..."
    
    for chatmode in ~/.vscode/chatmodes/*.md; do
        if [ -f "$chatmode" ]; then
            filename=$(basename "$chatmode")
            echo "üîó Verificando $filename..."
            
            # Verificar se o chatmode tem pelo menos um link para instru√ß√µes
            has_instruction_link=false
            
            # Extrair links para arquivos de instru√ß√µes
            if grep -q '\[.*\](../instructions/.*\.md)' "$chatmode"; then
                has_instruction_link=true
                
                # Buscar por links espec√≠ficos
                grep -o '\[.*\](../instructions/[^)]*\.md)' "$chatmode" | while read -r link; do
                    instruction_file=$(echo "$link" | sed 's/.*(\.\.\///g' | sed 's/).*//g' | sed 's/instructions\///g')
                    
                    if [ -f ~/.vscode/instructions/"$instruction_file" ]; then
                        echo "  ‚úÖ Link v√°lido: $instruction_file"
                    else
                        echo "  ‚ùå Link quebrado: $instruction_file"
                        ((broken_links++))
                        ((total_errors++))
                    fi
                done
            fi
            
            if [ "$has_instruction_link" = false ]; then
                print_warning "  Nenhum link para instru√ß√µes encontrado em $filename"
                ((total_warnings++))
            fi
        fi
    done
}

# Fun√ß√£o para mostrar estat√≠sticas
show_statistics() {
    echo
    print_info "üìä Estat√≠sticas dos arquivos:"
    
    local total_lines=0
    
    echo "üìÑ Perfis de ChatMode:"
    for file in ~/.vscode/chatmodes/*.md; do
        if [ -f "$file" ]; then
            filename=$(basename "$file")
            lines=$(wc -l < "$file")
            total_lines=$((total_lines + lines))
            printf "   %-35s %5d linhas\n" "$filename" "$lines"
        fi
    done
    
    echo
    echo "üìö Arquivos de Instru√ß√µes:"
    for file in ~/.vscode/instructions/*.md; do
        if [ -f "$file" ]; then
            filename=$(basename "$file")
            lines=$(wc -l < "$file")
            total_lines=$((total_lines + lines))
            printf "   %-35s %5d linhas\n" "$filename" "$lines"
        fi
    done
    
    echo
    print_info "üìà Resumo:"
    echo "   Total de linhas de documenta√ß√£o: $total_lines"
    echo "   Perfis de chatmode: $(ls ~/.vscode/chatmodes/*.md 2>/dev/null | wc -l)"
    echo "   Arquivos de instru√ß√µes: $(ls ~/.vscode/instructions/*.md 2>/dev/null | wc -l)"
    
    if [ -d ~/.vscode/scripts ]; then
        echo "   Scripts utilit√°rios: $(ls ~/.vscode/scripts/*.sh 2>/dev/null | wc -l)"
    fi
}

# Fun√ß√£o para mostrar relat√≥rio final
show_final_report() {
    echo
    print_header
    
    if [ $total_errors -eq 0 ] && [ $total_warnings -eq 0 ]; then
        print_success "üéØ Sistema ChatModes funcionando perfeitamente!"
        echo "   ‚úÖ Todos os arquivos presentes"
        echo "   ‚úÖ Todos os links funcionais"
        echo "   ‚úÖ Estrutura correta"
    elif [ $total_errors -eq 0 ]; then
        print_warning "‚ö†Ô∏è  Sistema ChatModes funcionando com avisos"
        echo "   ‚úÖ Todos os arquivos essenciais presentes"
        echo "   ‚ö†Ô∏è  $total_warnings aviso(s) encontrado(s)"
    else
        print_error "‚ùå Sistema ChatModes com problemas"
        echo "   ‚ùå $total_errors erro(s) encontrado(s)"
        echo "   ‚ö†Ô∏è  $total_warnings aviso(s) encontrado(s)"
        echo
        print_info "Recomenda√ß√£o: Execute o instalador para corrigir problemas"
        return 1
    fi
    
    echo
    print_info "üí° Pr√≥ximos passos:"
    echo "   1. Teste um perfil: code ~/.vscode/chatmodes/dev-angular.chatmode.md"
    echo "   2. Leia o guia: code ~/.vscode/INSTALL-GUIDE.md"
    echo "   3. Configure VS Code com as configura√ß√µes recomendadas"
    
    return 0
}

# Fun√ß√£o principal
main() {
    print_header
    
    check_directories || exit 1
    check_required_profiles
    check_links
    show_statistics
    
    show_final_report
}

# Verificar se est√° sendo executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
